

Module 2:

CD workflow:

1.Test
	Unit and Integration testing
		Source Code
		Test Suite
		Docker wrap Test Runner:
			java 	-	maven,gradle
			python	-	manage.py
		

2.Build
	Build application artifact
		-	python  wheels
		-	java JAR files

	Create deployable artifact

3.Release
	Create deployable release artifact in the form of Docker release image
		-	runtime environment
		-	install application artifact
	Create release environment using docker compose
		-	run acceptance testing 
	Tag and publish the Docker image
		-	only the acceptance is pass
		-	push to Docker Hub

4.Deploy
	Deploy the docker image in atlease one environment
		-	dev, QA or staging envieonment
		-	Ansible used to deplot the AWS
		-	AWS EC2 container mange rolling deployment of docker image



Installation Process:

	-	Install VMWare Fusion
	-	Install brew package manager
		-	installation commend get from brew home page
		-	check brew update command- brew update
	-	Install Docker
		-	brew install docker-compose
		-	brew install docker
		-	brew install docker-machine
	- 	Install Python
		-	brew install python
		-	pip install pip --upgrade
	-	Install ansible
		-	pip install ansible --upgrade 
		-	pip install boto boto3
		-	pip install awscli
	-	Install git
		- 	brew install git
		-	Install sublime text
	-	Create docker virtual machine
		-	docker-machine create --driver virtualbox modifyvm--cpus 4 --memory 			20000 --vram 8000 --name dockervm01
		-	docker-machine env dockervm01
		-	eval "$(docker-machine env dockervm01)"
		-	docker pull ubundu
		-	docker images
		-	docker-machine ip dockervm01
		-	docker-machine ssh dockervm01
		-	docker-machine restart dockervm01
		-	docker-machine ls


Module 3:

	-	create simple django application
		-	pip install virtualenv
		-	virtualenv envname
		-	env\scripts\activate
		-	pip install pip --upgrade
		-	pip install django==version
		-	pip install djangorestframework
		-	pip install django-cors-headers
		-	django-admin startproject TodoApp
		-	create src folder in TodoApp. then , move manage.py file to src folder. 
	-	Unit and Integration Testing
		-	create tests file todo app and write testcases
		-	run command : python manage.py test
		-	create settings folder and create base,test file with in the folder
		-	run command : python manage.py test --settings=TodoApp.settings.test
		-	Improving test output 
		- 	install command : pip install django-nose
		-	pip install pinocchio
		-	pip install coverage
		-	run command : python manage.py test --settings=TodoApp.settings.test
	-	Acceptance Test
		-	create TodoApp-Spec folder
		-	install node.js
		-	commnad : npm init
		-	command : npm install bluebird chai chai-as-promised mocha superagent 					superagent-promise mocha-jenkins-reporter --save
		- 	save flag add packages with dependencies
		- 	mocha and chai used create and run the test  
		- 	superagent used to communicate with HTTP client
		- 	bluebrid support promises used to control asy process
		- 	jenkins-reporter provide junit.xml report
	- 	Crate TodoCleient
		-	clone TodoClient
		-	run commnad : npm install
		-	run commnad : npm install -g grunt-cli
		- 	run commnad : node app.js

MODULE 4:
	-  	Continuous Delivery Workflow
		-	Test
			-	Create Test Environement
				-	Base Image
				-	Development Image
				-	Docker Compose
			-	Run unit Test
				-	Single Container
			-	Run Itegration Test
				-	Single/ Multi container Complex workflow
		-	Basic of Base Image
			-	minimum runtime environment
			-	application defendencies
			-	system configuration
			-	default setting
		-	Basic of Release Image
			-	install application
			-	application configuration
			-	application entrypoint
		-	Basic of development Image
			-	install Dev defendencies
			-	install buid / test tool
			