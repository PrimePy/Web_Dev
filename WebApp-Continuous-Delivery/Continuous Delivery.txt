

Module 2:

CD workflow:

1.Test
	Unit and Integration testing
		Source Code
		Test Suite
		Docker wrap Test Runner:
			java 	-	maven,gradle
			python	-	manage.py
		

2.Build
	Build application artifact
		-	python  wheels
		-	java JAR files

	Create deployable artifact

3.Release
	Create deployable release artifact in the form of Docker release image
		-	runtime environment
		-	install application artifact
	Create release environment using docker compose
		-	run acceptance testing 
	Tag and publish the Docker image
		-	only the acceptance is pass
		-	push to Docker Hub

4.Deploy
	Deploy the docker image in atlease one environment
		-	dev, QA or staging envieonment
		-	Ansible used to deplot the AWS
		-	AWS EC2 container mange rolling deployment of docker image



Installation Process:

	-	Install VMWare Fusion
	-	Install brew package manager
		-	installation commend get from brew home page
		-	check brew update command- brew update
	-	Install Docker
		-	brew install docker-compose
		-	brew install docker
		-	brew install docker-machine
	- 	Install Python
		-	brew install python
		-	pip install pip --upgrade
	-	Install ansible
		-	pip install ansible --upgrade 
		-	pip install boto boto3
		-	pip install awscli
	-	Install git
		- 	brew install git
		-	Install sublime text
	-	Create docker virtual machine
		-	docker-machine create --driver virtualbox modifyvm--cpus 4 --memory 			20000 --vram 8000 --name dockervm01
		-	docker-machine env dockervm01
		-	eval "$(docker-machine env dockervm01)"
		-	docker pull ubundu
		-	docker images
		-	docker-machine ip dockervm01
		-	docker-machine ssh dockervm01
		-	docker-machine restart dockervm01
		-	docker-machine ls


Module 3:

	-	create simple django application
		-	pip install virtualenv
		-	virtualenv envname
		-	env\scripts\activate
		-	pip install pip --upgrade
		-	pip install django==version
		-	pip install djangorestframework
		-	pip install django-cors-headers
		-	django-admin startproject TodoApp
		-	create src folder in TodoApp. then , move manage.py file to src folder. 
	-	Unit and Integration Testing
		-	create tests file todo app and write testcases
		-	run command : python manage.py test
		-	create settings folder and create base,test file with in the folder
		-	run command : python manage.py test --settings=TodoApp.settings.test
		-	Improving test output 
		- 	install command : pip install django-nose
		-	pip install pinocchio
		-	pip install coverage
		-	run command : python manage.py test --settings=TodoApp.settings.test
	-	Acceptance Test
		-	create TodoApp-Spec folder
		-	install node.js
		-	commnad : npm init
		-	command : npm install bluebird chai chai-as-promised mocha superagent 					superagent-promise mocha-jenkins-reporter --save
		- 	save flag add packages with dependencies
		- 	mocha and chai used create and run the test  
		- 	superagent used to communicate with HTTP client
		- 	bluebrid support promises used to control asy process
		- 	jenkins-reporter provide junit.xml report
	- 	Crate TodoCleient
		-	clone TodoClient
		-	run commnad : npm install
		-	run commnad : npm install -g grunt-cli
		- 	run commnad : node app.js

MODULE 4:
	-  	Continuous Delivery Workflow
		-	Test
			-	Create Test Environement
				-	Base Image
				-	Development Image
				-	Docker Compose
			-	Run unit Test
				-	Single Container
			-	Run Itegration Test
				-	Single/ Multi container Complex workflow
		-	Basic of Base Image
			-	minimum runtime environment
			-	application defendencies
			-	system configuration
			-	default setting
		-	Basic of Release Image
			-	install application
			-	application configuration
			-	application entrypoint
		-	Basic of development Image
			-	install Dev defendencies
			-	install buid / test tool
	-Create base image
		-	folder structure - TodoApp-Base

		-	Docker Operation ------- Base docker image ----- Docker Repository
		                      commit                    push           
            																    = CI + CD
		-	Developer  --------  sourcecode -------    git repository  
		                commit               push                     

		-   create folder TodoApp-Base. 
		-	create Docker file using command - touch Dockerfile 
		-	create entrypoint

		Base Image:

			
			# parent image ubundu,release code name trusty 
			FROM ubundu:trusty
			MAINTAINER Saravanakumar Selvam  <saravanakumar323py@gmail.com>

			# prevent package error
			ENV TERM=xterm-256color
			
			# Set mirrors to NZ
			# sed is a editor, s/Regexp/Replacement store location
			RUN sed -i "s/http:\/\/archive./http:\/\/nz.archive./g" /etc/apt/sources.list

			# Install python runtime
			# Update the linux package database
			RUN apt-get update &&\
				apt-get install -y\
				-o APT::Install-Recommend=false -o APT::Install-Suggests=false \
				pyhon python-virtualenv

			# Create virtual environment
			# Upgrade PIP in virtual environment to latest version
			RUN virtualenv /appenv && \
				./appenv/bin/activate && \
				pip install pip --upgrade

		- Create entrypoint.sh
			# activate the virtual environment
			. /appenv/bin/activate
			exec $@
		- Run build command - docker build -t saravase/TodoApp-Base .
		- Display list of images - docker images
		- Run entrypoint - docker run -rm saravase/TodoApp ps
			# -rm - cleanup container
			# ps show current container

	- 	Create development image
		-	Folder structure
			TodoApp - docker - dev - create Docker file
		-	Development Image
			FROM saravase/TodoApp-Base:latest
			MAINTAINER Saravanakumar Selvam <saravanakumar323py@gmail.com>

			# Install dev/build dependancies
			RUN apt-get update && \
				apt-get install -qy python-dev

			#Activate VE and install wheel
			RUN ./appenv/bin/activate && \
				pip install wheel --upgrade

			# PIP environment variavbles
			ENV WHEELHOUSE=/wheelhouse PIP_WHEEL_DIR=/wheelhouse PIP_FIND_LINKS=/wheelhouse XDG_CACHE_HOME=/cache

			# OUTPUT: Build artifacts(wheel) are output here
			VOLUME /wheelhouse

			# OUTPUT: Test reports
			VOLUME /reports

			#Add test entrypoint script
			COPY scripts/test.sh /usr/local/bin/test.sh
			RUN chmod +x /usr/local/bin/test.sh

			# Set defaults for entrypoint and command string
			ENTRYPOINT ["test.sh"]
			CMD ["python", "manage.py", "tst", "--noinput"]

			# Add applicaton source
			COPY src / application
			WORKDIR /application

		- 	Create folder TodoApp - scripts - test.sh
		-	test.sh
			# Activate VE
			. /appenv/bin/activate

			# Install application test requirements
			pip install -r requirements_test.txt

			# Run test.sh arguements
			exec $@
	- 	Create application requirements
		-	Create folder structure - TodoApp - src - requirements.txt
		-	requirements.txt
			Django==2.2
			django-cors-headers==2.5.2
			djnagorestframework==3.9.2
			mysqlclient==1.4.2.post1

		-	requirements_test.txt
			-r requirements.txt
			colorama==0.4.1
			coverage==4.5.3
			django-nose==1.4.6
			nose==1.3.7
			pinocchio==0.4.2
			







































































